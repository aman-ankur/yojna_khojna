# .github/workflows/python-ci.yml
name: Python CI Checks

on:
  # Trigger on pull requests targeting the main branch
  pull_request:
    branches: [ main ] # Adjust if your main branch is named differently (e.g., master)
  # Optionally, also run on pushes to main after merging (good practice)
  push:
    branches: [ main ]

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest # Use a standard Linux runner

    strategy:
      matrix:
        # Specify the Python version(s) to test with
        python-version: ['3.9'] # Match your project's Python version

    steps:
    - name: Check out code
      uses: actions/checkout@v4 # Action to get your repository code

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip # The path to cache
        # Create a unique key based on runner OS, Python version, and requirements file hash
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r backend/requirements.txt # Install from backend directory
        # Install pytest-asyncio explicitly
        python -m pip install pytest-asyncio>=0.19.0
      # Note: No need to activate venv here, GitHub Actions installs globally for the runner session
    
    - name: Run debugging tests
      run: |
        # Test new diagnostics file first
        PYTHONPATH=backend:$PYTHONPATH PYTEST_ASYNCIO_MODE=auto python -m pytest backend/tests/test_ci_debug.py -v
      
    - name: Run unit tests (excluding integration)
      run: |
        # Use auto mode for asyncio with detailed logging
        PYTHONPATH=backend:$PYTHONPATH PYTEST_ASYNCIO_MODE=auto python -m pytest -m "not integration" backend/tests -v --log-cli-level=DEBUG 